import{_ as e,c as l,o as i,a as t}from"./app.7a42e18f.js";const a="/web-note/assets/1.4f1f3234.png",f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"复杂度","slug":"复杂度","link":"#复杂度","children":[{"level":3,"title":"1. 什么是复杂度","slug":"_1-什么是复杂度","link":"#_1-什么是复杂度","children":[]},{"level":3,"title":"2. 复杂度表示法","slug":"_2-复杂度表示法","link":"#_2-复杂度表示法","children":[]},{"level":3,"title":"3. 空间复杂度","slug":"_3-空间复杂度","link":"#_3-空间复杂度","children":[]}]}],"relativePath":"web-front/DSAA/computationComplexity.md"}'),n={name:"web-front/DSAA/computationComplexity.md"},r=t('<h2 id="复杂度" tabindex="-1">复杂度 <a class="header-anchor" href="#复杂度" aria-hidden="true">#</a></h2><h3 id="_1-什么是复杂度" tabindex="-1">1. 什么是复杂度 <a class="header-anchor" href="#_1-什么是复杂度" aria-hidden="true">#</a></h3><ul><li>程序执行是需要的计算量和内存空间</li><li>复杂度是数量级，不是具体的数据</li><li>一般针对一个具体的算法，而非一个完整的系统</li></ul><h3 id="_2-复杂度表示法" tabindex="-1">2. 复杂度表示法 <a class="header-anchor" href="#_2-复杂度表示法" aria-hidden="true">#</a></h3><p>算法复杂度曲线图：</p><p><img src="'+a+'" alt="算法复杂度曲线"></p><ul><li>O(1)：可数的，意思是，和输入量无关，无论输入量是1还是1000，都不影响它。</li><li>O(log n)：数据量的对数。随着输入量的增加，计算量趋于平缓。</li><li>O(n)：输入量是多少，计算量就是多少。</li><li>O(n * log n)：计算量是 n 倍的 log n。</li><li>O(n^2)：计算量是输入量的二次方。</li></ul><h3 id="_3-空间复杂度" tabindex="-1">3. 空间复杂度 <a class="header-anchor" href="#_3-空间复杂度" aria-hidden="true">#</a></h3><ul><li>O(1) 有限的、可数的空间。</li><li>O(n) 和输入的数据量相同的空间。</li><li></li></ul>',9),o=[r];function _(s,c,d,h,p,u){return i(),l("div",null,o)}const g=e(n,[["render",_]]);export{f as __pageData,g as default};
